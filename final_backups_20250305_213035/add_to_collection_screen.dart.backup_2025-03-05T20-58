import 'package:flutter/material.dart';
import '../models/tcg_card.dart';
import '../services/collection_service.dart';
import '../widgets/card_preview.dart';
import '../constants/app_colors.dart';
import '../constants/text_styles.dart';
import '../utils/logger.dart';

class AddToCollectionScreen extends StatelessWidget {
  final TcgCard card;
  final String? collection;
  final Function? onAdd;
  
  const AddToCollectionScreen({
    required this.card, 
    this.collection,
    this.onAdd,
    Key? key
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final collectionService = CollectionService.getInstance();
    
    return Scaffold(
      appBar: AppBar(
        title: Text('Add to Collection'),
        elevation: 1,
      ),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              CardPreview(card: card, heroTag: 'add_${card.id}'),
              SizedBox(height: 24),
              Text(
                card.name,
                style: TextStyles.heading,
                textAlign: TextAlign.center,
              ),
              SizedBox(height: 8),
              Text(
                card.setName,
                style: TextStyles.subtitle,
                textAlign: TextAlign.center,
              ),
              SizedBox(height: 32),
              Text(
                'Add to Collection:',
                style: TextStyles.bodySemiBold,
              ),
              SizedBox(height: 16),
              FutureBuilder<List<String>>(
                future: collectionService.getCollectionNames(),
                builder: (context, snapshot) {
                  if (snapshot.connectionState == ConnectionState.waiting) {
                    return Center(child: CircularProgressIndicator());
                  }
                  
                  if (snapshot.hasError) {
                    return Text('Error loading collections: ${snapshot.error}');
                  }
                  
                  final collections = snapshot.data ?? [];
                  if (collections.isEmpty) {
                    return Column(
                      children: [
                        Text('You don\'t have any collections yet.'),
                        SizedBox(height: 16),
                        ElevatedButton(
                          onPressed: () async {
                            // Create default collection
                            await collectionService.createCollection('My Collection');
                            setState(() {});
                          },
                          child: Text('Create "My Collection"'),
                        ),
                      ],
                    );
                  }
                  
                  return ListView.builder(
                    shrinkWrap: true,
                    physics: NeverScrollableScrollPhysics(),
                    itemCount: collections.length,
                    itemBuilder: (context, index) {
                      final collection = collections[index];
                      return Card(
                        margin: EdgeInsets.only(bottom: 8),
                        child: ListTile(
                          title: Text(collection),
                          trailing: IconButton(
                            icon: Icon(Icons.add),
                            onPressed: () async {
                              await _addCardToCollection(
                                context,
                                collection,
                                card,
                              );
                            },
                          ),
                        ),
                      );
                    },
                  );
                },
              ),
              SizedBox(height: 24),
              OutlinedButton(
                child: Text('Create New Collection'),
                onPressed: () => _showCreateCollectionDialog(context),
              )
            ],
          ),
        ),
      ),
    );
  }

  Future<void> _addCardToCollection(
    BuildContext context, 
    String collection, 
    TcgCard card
  ) async {
    try {
      final collectionService = CollectionService.getInstance();
      await collectionService.addCardToCollection(card, collection);
      
      // Show confirmation
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('${card.name} added to $collection'),
          backgroundColor: AppColors.success,
          duration: Duration(seconds: 2),
        ),
      );
      
      // Call onAdd callback if provided
      onAdd?.call();
      
      // Pop navigation when added
      Navigator.of(context).pop();
    } catch (e) {
      AppLogger.e('Error adding card to collection', error: e);
      // Show error
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Failed to add card: ${e.toString()}'),
          backgroundColor: AppColors.error,
        ),
      );
    }
  }
  
  void _showCreateCollectionDialog(BuildContext context) {
    final textController = TextEditingController();
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Create Collection'),
        content: TextField(
          controller: textController,
          decoration: InputDecoration(
            labelText: 'Collection Name',
            hintText: 'Enter a name for your collection',
          ),
          autofocus: true,
        ),
        actions: [
          TextButton(
            child: Text('Cancel'),
            onPressed: () => Navigator.of(context).pop(),
          ),
          ElevatedButton(
            child: Text('Create'),
            onPressed: () async {
              final name = textController.text.trim();
              if (name.isNotEmpty) {
                Navigator.of(context).pop();
                
                final collectionService = CollectionService.getInstance();
                await collectionService.createCollection(name);
                
                // Refresh the screen
                setState(() {});
              }
            },
          ),
        ],
      ),
    );
  }
  
  // Helper method to force refresh
  void setState(VoidCallback fn) {
    // This is just a helper that works around StatelessWidget limitations
    fn();
    
    // In a real app, you would use a StatefulWidget instead
    // or a state management solution like Provider
  }
}