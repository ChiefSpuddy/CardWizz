platform :ios, '12.0'

ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!
  use_modular_headers!

  # Pin Firebase dependencies to exact versions for stability
  pod 'Firebase/Core', '10.18.0'
  pod 'Firebase/Auth', '10.18.0'
  
  # CRITICAL FIX: Use exact version to resolve conflicts
  pod 'GoogleSignIn', '6.2.4'
  
  # Install Flutter plugins
  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
    
    target.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.0'
      
      # These settings allow all frameworks to use non-modular headers
      config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
      config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
      
      # Specific fixes for firebase_auth target
      if target.name == 'firebase_auth'
        puts "➡️ Applying special config for firebase_auth target"
        
        # Add Common Crypto import needed by the plugin
        if config.build_settings['OTHER_CFLAGS'].nil?
          config.build_settings['OTHER_CFLAGS'] = ['-include CommonCrypto/CommonCrypto.h']
        else
          config.build_settings['OTHER_CFLAGS'] << '-include CommonCrypto/CommonCrypto.h'
        end
        
        # Keep modules enabled but modify import paths
        config.build_settings['HEADER_SEARCH_PATHS'] = [
          '$(inherited)',
          '${PODS_ROOT}/Firebase/CoreOnly/Sources',
          '${PODS_ROOT}/Headers/Public',
          '${PODS_ROOT}/Headers/Public/Firebase'
        ]
      end
    end
  end
  
  # Get the actual PODS_ROOT path
  pods_root = Pod::Config.instance.installation_root.to_s + '/Pods'
  firebase_dir = File.join(pods_root, 'Headers', 'Public', 'Firebase')
  
  # Important: Remove any duplicate module maps to avoid conflicts
  system("find \"#{pods_root}\" -name \"module.modulemap\" -path \"*/Firebase/CoreOnly/Sources/*\" -delete")
  
  # Create directory if it doesn't exist
  FileUtils.mkdir_p(firebase_dir)
  
  # Create a consistent Firebase module map after cleaning up duplicates
  module_map_path = File.join(firebase_dir, 'module.modulemap')
  File.open(module_map_path, "w") do |file|
    file.puts "module Firebase {"
    file.puts "  umbrella header \"Firebase.h\""
    file.puts "  export *"
    file.puts "}"
  end
  
  # Ensure Firebase.h is available
  firebase_header_dest = File.join(firebase_dir, 'Firebase.h')
  firebase_header_src = File.join(pods_root, 'Firebase', 'CoreOnly', 'Sources', 'Firebase.h')
  if !File.exist?(firebase_header_dest) && File.exist?(firebase_header_src)
    FileUtils.cp(firebase_header_src, firebase_header_dest)
  end
end
